#!/usr/bin/env python3
"""
tmux-fzf-url: Open URLs from tmux pane with fzf
Python translation of junegunn's Ruby version
https://github.com/junegunn/tmux-fzf-url/blob/master/fzf-url.rb
"""

import os
import re
import shutil
import subprocess
import sys


def find_executable(*commands: str) -> str | None:
    """Find the first available command"""
    for cmd in commands:
        cmd_name = cmd.split()[0]
        if shutil.which(cmd_name):
            return cmd
    return None


def tmux_message(message: str) -> None:
    """Display message in tmux"""
    try:
        subprocess.run(["tmux", "display-message", message], check=False)
    except FileNotFoundError:
        print(f"tmux-fzf-url: {message}", file=sys.stderr)


def get_tmux_content() -> str:
    """Get tmux pane content with full history"""
    try:
        result = subprocess.run(
            ["tmux", "capture-pane", "-J", "-p", "-S", "-99999"],
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout
    except (subprocess.CalledProcessError, FileNotFoundError):
        tmux_message("Failed to capture tmux pane content")
        sys.exit(1)


def extract_urls(text: str) -> list[str]:
    """Extract unique URLs from text, preserving most recent"""
    all_urls = []

    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue

        # Standard URLs (http/https/ftp/file)
        standard_urls = re.findall(
            r"(?:https?|ftp|file)://[-a-zA-Z0-9@:%_+.~#?&/=]+[-a-zA-Z0-9@%_+.~#?&/=!]+",
            line,
        )
        all_urls.extend(standard_urls)

        # www domains (prepend http://)
        www_domains = re.findall(
            r"(?:^|[^:/])www\.[a-zA-Z](?:-?[a-zA-Z0-9])*\.[a-zA-Z]{2,}(?:/\S*)?", line
        )
        all_urls.extend(f"http://{domain.lstrip()}" for domain in www_domains)

        # IP addresses with optional ports and paths
        ip_addresses = re.findall(
            r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?::[0-9]{1,5})?(?:/\S*)?", line
        )
        all_urls.extend(f"http://{ip}" for ip in ip_addresses)

        # Git SSH URLs (convert to https)
        git_urls = re.findall(
            r"(?:ssh://)?git@([^:/\s]+)[:/]([^/\s]+/[^/\s]+?)(?:\.git)?(?:\s|$)", line
        )
        for host, repo in git_urls:
            all_urls.append(f"https://{host}/{repo}")

    # Deduplicate while preserving order (most recent first)
    seen = set()
    unique_urls = []
    for url in reversed(all_urls):
        if url not in seen:
            seen.add(url)
            unique_urls.append(url)

    return unique_urls


def get_fzf_dimensions(urls: list[str], header: str) -> str:
    """Calculate optimal fzf popup dimensions"""
    try:
        result = subprocess.run(
            ["tmux", "display-message", "-p", "#{client_width} #{client_height}"],
            capture_output=True,
            text=True,
            check=True,
        )
        max_width, max_height = map(int, result.stdout.strip().split())
    except (subprocess.CalledProcessError, ValueError):
        max_width, max_height = 120, 30

    content_width = max(len(url) for url in [*urls, header]) + 10
    content_height = len(urls) + 7

    width = min(content_width, max_width)
    height = min(content_height, max_height)

    return f"{width},{height}"


def run_fzf(urls: list[str]) -> list[str]:
    """Run fzf to select URLs"""
    header = "Press C-y to copy URL to clipboard"
    size = get_fzf_dimensions(urls, header)

    cmd = [
        "fzf",
        "--tmux",
        size,
        "--multi",
        "--no-margin",
        "--no-padding",
        "--wrap",
        "--expect",
        "ctrl-y",
        "--style",
        "default",
        "--header",
        header,
        "--header-border",
        "top",
        "--highlight-line",
        "--header-first",
        "--info",
        "inline-right",
        "--padding",
        "1,1,0,1",
        "--border-label",
        " URLs ",
    ]

    try:
        result = subprocess.run(
            cmd, input="\n".join(urls), capture_output=True, text=True, check=False
        )
        return [line.strip() for line in result.stdout.splitlines() if line.strip()]
    except FileNotFoundError:
        tmux_message("fzf not found")
        sys.exit(1)


def copy_to_clipboard(text: str) -> None:
    """Copy text to clipboard"""
    try:
        copier = ["tmux", "set-buffer", "-w", text]
        subprocess.run(copier, text=True, capture_output=True, check=True)
        tmux_message("Copied to clipboard")
    except subprocess.CalledProcessError:
        tmux_message("Failed to copy to clipboard")


def open_urls(urls: list[str]) -> None:
    """Open URLs in default browser"""
    # Check if we're in a remote SSH session
    if bool(os.environ.get("SSH_CLIENT") or os.environ.get("SSH_TTY")):
        tmux_message("Remote Session -- SKIP!")
        return

    opener = find_executable("open", "xdg-open")

    if not opener:
        tmux_message("No URL opener found")
        return

    opened_count = 0
    for url in urls:
        try:
            result = subprocess.run([opener, url], capture_output=True, check=False)
            if result.returncode == 0:
                opened_count += 1
        except (subprocess.CalledProcessError, FileNotFoundError):
            continue

    if opened_count > 0:
        tmux_message(f"Opened {opened_count} URL(s)")
    else:
        tmux_message("Failed to open URLs")


def main() -> None:
    # Get URLs from tmux
    content = get_tmux_content()
    urls = extract_urls(content)

    if not urls:
        tmux_message("No URLs found")
        return

    selected = run_fzf(urls)
    if not selected:
        return

    # Handle fzf output
    if selected[0] == "ctrl-y":
        if len(selected) > 1:
            copy_to_clipboard("\n".join(selected[1:]))
        else:
            tmux_message("No URLs selected for copying")
    else:
        open_urls(selected)


if __name__ == "__main__":
    main()
